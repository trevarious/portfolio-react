{"ast":null,"code":"var _jsxFileName = \"/Users/trevorsykes/Desktop/react-portfolio/src/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport globeTexture from '../src/your-globe-texture.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Globe({\n  width,\n  height\n}) {\n  _s();\n  const globeContainer = useRef(null);\n  useEffect(() => {\n    let scene, camera, renderer, globe;\n\n    // Create a new scene\n    scene = new THREE.Scene();\n\n    // Create a camera\n    camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Create a renderer\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setClearColor(0x000000, 0); // Set clearAlpha to 0 for transparency\n\n    // Append renderer to the container\n    globeContainer.current.appendChild(renderer.domElement);\n\n    // Create a globe geometry\n    const geometry = new THREE.SphereGeometry(2, 32, 32);\n    const texture = new THREE.TextureLoader().load(globeTexture // Replace with the path to your globe texture\n    );\n\n    const material = new THREE.MeshBasicMaterial({\n      map: texture\n    });\n\n    // Create the globe mesh\n    globe = new THREE.Mesh(geometry, material);\n    scene.add(globe);\n\n    // Animation function to rotate the globe\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Rotate the globe\n      globe.rotation.y += 0.005;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up on unmount\n    return () => {\n      renderer.domElement.remove();\n      renderer.dispose();\n    };\n  }, [width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: globeContainer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 12\n  }, this);\n}\n_s(Globe, \"lMykeH1q+H7BsgKvUij6j7BesKc=\");\n_c = Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","globeTexture","jsxDEV","_jsxDEV","Globe","width","height","_s","globeContainer","scene","camera","renderer","globe","Scene","PerspectiveCamera","position","z","WebGLRenderer","antialias","setClearColor","current","appendChild","domElement","geometry","SphereGeometry","texture","TextureLoader","load","material","MeshBasicMaterial","map","Mesh","add","animate","requestAnimationFrame","rotation","y","render","remove","dispose","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorsykes/Desktop/react-portfolio/src/Globe.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nimport globeTexture from '../src/your-globe-texture.webp';\n\nexport default function Globe({ width, height }) {\n    const globeContainer = useRef(null);\n\n    useEffect(() => {\n        let scene, camera, renderer, globe;\n\n        // Create a new scene\n        scene = new THREE.Scene();\n\n        // Create a camera\n        camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n        camera.position.z = 5;\n\n        // Create a renderer\n        renderer = new THREE.WebGLRenderer({ antialias: true });\n        renderer.setClearColor(0x000000, 0); // Set clearAlpha to 0 for transparency\n\n        // Append renderer to the container\n        globeContainer.current.appendChild(renderer.domElement);\n\n        // Create a globe geometry\n        const geometry = new THREE.SphereGeometry(2, 32, 32);\n        const texture = new THREE.TextureLoader().load(\n            globeTexture // Replace with the path to your globe texture\n        );\n        const material = new THREE.MeshBasicMaterial({ map: texture });\n\n        // Create the globe mesh\n        globe = new THREE.Mesh(geometry, material);\n        scene.add(globe);\n\n        // Animation function to rotate the globe\n        const animate = () => {\n            requestAnimationFrame(animate);\n\n            // Rotate the globe\n            globe.rotation.y += 0.005;\n\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        // Clean up on unmount\n        return () => {\n            renderer.domElement.remove();\n            renderer.dispose();\n        };\n    }, [width, height]);\n\n    return <div ref={globeContainer} />;\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,OAAOC,YAAY,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,eAAe,SAASC,KAAKA,CAAC;EAAEC,KAAK;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAMC,cAAc,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAM;IACZ,IAAIW,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,KAAK;;IAElC;IACAH,KAAK,GAAG,IAAIT,KAAK,CAACa,KAAK,CAAC,CAAC;;IAEzB;IACAH,MAAM,GAAG,IAAIV,KAAK,CAACc,iBAAiB,CAAC,EAAE,EAAET,KAAK,GAAGC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;IACnEI,MAAM,CAACK,QAAQ,CAACC,CAAC,GAAG,CAAC;;IAErB;IACAL,QAAQ,GAAG,IAAIX,KAAK,CAACiB,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IACvDP,QAAQ,CAACQ,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;;IAErC;IACAX,cAAc,CAACY,OAAO,CAACC,WAAW,CAACV,QAAQ,CAACW,UAAU,CAAC;;IAEvD;IACA,MAAMC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IACpD,MAAMC,OAAO,GAAG,IAAIzB,KAAK,CAAC0B,aAAa,CAAC,CAAC,CAACC,IAAI,CAC1C1B,YAAY,CAAC;IACjB,CAAC;;IACD,MAAM2B,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,iBAAiB,CAAC;MAAEC,GAAG,EAAEL;IAAQ,CAAC,CAAC;;IAE9D;IACAb,KAAK,GAAG,IAAIZ,KAAK,CAAC+B,IAAI,CAACR,QAAQ,EAAEK,QAAQ,CAAC;IAC1CnB,KAAK,CAACuB,GAAG,CAACpB,KAAK,CAAC;;IAEhB;IACA,MAAMqB,OAAO,GAAGA,CAAA,KAAM;MAClBC,qBAAqB,CAACD,OAAO,CAAC;;MAE9B;MACArB,KAAK,CAACuB,QAAQ,CAACC,CAAC,IAAI,KAAK;MAEzBzB,QAAQ,CAAC0B,MAAM,CAAC5B,KAAK,EAAEC,MAAM,CAAC;IAClC,CAAC;IAEDuB,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACTtB,QAAQ,CAACW,UAAU,CAACgB,MAAM,CAAC,CAAC;MAC5B3B,QAAQ,CAAC4B,OAAO,CAAC,CAAC;IACtB,CAAC;EACL,CAAC,EAAE,CAAClC,KAAK,EAAEC,MAAM,CAAC,CAAC;EAEnB,oBAAOH,OAAA;IAAKqC,GAAG,EAAEhC;EAAe;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACrC,EAAA,CAnDuBH,KAAK;AAAAyC,EAAA,GAALzC,KAAK;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}