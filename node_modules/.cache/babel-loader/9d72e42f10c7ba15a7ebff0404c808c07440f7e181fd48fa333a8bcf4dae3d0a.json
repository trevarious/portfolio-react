{"ast":null,"code":"var _jsxFileName = \"/Users/trevorsykes/Desktop/react-portfolio/src/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport globeTexture from '../src/your-globe-texture.webp';\nimport './Globe.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n  const renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  const globeRef = useRef(null);\n  useEffect(() => {\n    // Set up renderer\n    const width = globeRef.current.clientWidth;\n    const height = globeRef.current.clientHeight;\n    renderer.setSize(width, height);\n    globeRef.current.appendChild(renderer.domElement);\n\n    // Create a sphere geometry for the globe with higher segments\n    const geometry = new THREE.SphereGeometry(1, 10, 10);\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(globeTexture);\n\n    // Use MeshStandardMaterial for more realistic shading and reflections\n    const material = new THREE.MeshStandardMaterial({\n      map: texture\n    });\n    const globeMesh = new THREE.Mesh(geometry, material);\n\n    // Add more realistic lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(1, 1, 1);\n    directionalLight.castShadow = true;\n\n    // Enable shadows\n    renderer.shadowMap.enabled = true;\n    globeMesh.castShadow = true;\n    globeMesh.receiveShadow = true;\n    directionalLight.shadow.mapSize.width = 1024;\n    directionalLight.shadow.mapSize.height = 1024;\n    scene.add(globeMesh, ambientLight, directionalLight);\n    camera.position.z = 5;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      globeMesh.rotation.y += 0.005;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up on component unmount\n    return () => {\n      globeRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, [renderer, scene, camera]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"globe\",\n    ref: globeRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n};\n_s(Globe, \"RnDsAY9k2/HDGJbJqxvzVF3XlM4=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","globeTexture","jsxDEV","_jsxDEV","Globe","_s","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","globeRef","width","current","clientWidth","height","clientHeight","setSize","appendChild","domElement","geometry","SphereGeometry","textureLoader","TextureLoader","texture","load","material","MeshStandardMaterial","map","globeMesh","Mesh","ambientLight","AmbientLight","directionalLight","DirectionalLight","position","set","castShadow","shadowMap","enabled","receiveShadow","shadow","mapSize","add","z","animate","requestAnimationFrame","rotation","y","render","removeChild","dispose","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorsykes/Desktop/react-portfolio/src/Globe.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport globeTexture from '../src/your-globe-texture.webp';\nimport './Globe.css';\n\nconst Globe = () => {\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\n  const renderer = new THREE.WebGLRenderer({ antialias: true });\n  const globeRef = useRef(null);\n\n  useEffect(() => {\n    // Set up renderer\n    const width = globeRef.current.clientWidth;\n    const height = globeRef.current.clientHeight;\n    renderer.setSize(width, height);\n    globeRef.current.appendChild(renderer.domElement);\n\n    // Create a sphere geometry for the globe with higher segments\n    const geometry = new THREE.SphereGeometry(1, 10, 10);\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(globeTexture);\n\n    // Use MeshStandardMaterial for more realistic shading and reflections\n    const material = new THREE.MeshStandardMaterial({ map: texture });\n    const globeMesh = new THREE.Mesh(geometry, material);\n\n    // Add more realistic lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight.position.set(1, 1, 1);\n    directionalLight.castShadow = true;\n\n    // Enable shadows\n    renderer.shadowMap.enabled = true;\n    globeMesh.castShadow = true;\n    globeMesh.receiveShadow = true;\n    directionalLight.shadow.mapSize.width = 1024;\n    directionalLight.shadow.mapSize.height = 1024;\n\n    scene.add(globeMesh, ambientLight, directionalLight);\n    camera.position.z = 5;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      globeMesh.rotation.y += 0.005;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Clean up on component unmount\n    return () => {\n      globeRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, [renderer, scene, camera]);\n\n  return <div className='globe' ref={globeRef} />;\n};\n\nexport default Globe;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}