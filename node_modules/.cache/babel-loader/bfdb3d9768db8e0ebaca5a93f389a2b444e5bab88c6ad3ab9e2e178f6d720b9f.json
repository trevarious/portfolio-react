{"ast":null,"code":"var _jsxFileName = \"/Users/trevorsykes/Desktop/react-portfolio/src/ThreeDImage.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoldenRatioSpiral = () => {\n  _s();\n  const spiralPoints = useRef([]);\n  const line = useRef();\n\n  // Function to calculate points for the golden ratio spiral\n  const calculateSpiralPoints = () => {\n    const points = [];\n    const a = 1.61803398875; // Golden ratio\n\n    for (let i = 0; i < 1000; i++) {\n      const angle = i * 0.1;\n      const radius = a ** i * 0.01;\n      const x = radius * Math.cos(angle);\n      const y = radius * Math.sin(angle);\n      const z = i * 0.01;\n      points.push(new THREE.Vector3(x, y, z));\n    }\n    spiralPoints.current = points;\n  };\n\n  // Calculate spiral points on mount\n  calculateSpiralPoints();\n\n  // Custom hook to update the line position\n  useFrame(() => {\n    const time = window.performance.now() / 1000;\n    if (spiralPoints.current.length > 0 && line.current) {\n      const index = Math.floor(time * 0.5) % spiralPoints.current.length;\n      const currentPosition = spiralPoints.current[index];\n      const vertices = line.current.geometry.vertices;\n      vertices[0].set(0, 0, 0); // Starting point at the center\n      vertices[1].set(currentPosition.x, currentPosition.y, currentPosition.z);\n      verticesNeedUpdate = true;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"line\", {\n    ref: line,\n    children: [/*#__PURE__*/_jsxDEV(\"geometry\", {\n      vertices: [new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 0)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n      color: 0xff0000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(GoldenRatioSpiral, \"teRKwo8Fyox9SgTwCl9C9QSC3p0=\", false, function () {\n  return [useFrame];\n});\n_c = GoldenRatioSpiral;\nconst ThreeDComponent = () => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoldenRatioSpiral, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ThreeDComponent;\nexport default ThreeDComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"GoldenRatioSpiral\");\n$RefreshReg$(_c2, \"ThreeDComponent\");","map":{"version":3,"names":["React","useRef","Canvas","useFrame","THREE","jsxDEV","_jsxDEV","GoldenRatioSpiral","_s","spiralPoints","line","calculateSpiralPoints","points","a","i","angle","radius","x","Math","cos","y","sin","z","push","Vector3","current","time","window","performance","now","length","index","floor","currentPosition","vertices","geometry","set","verticesNeedUpdate","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","ThreeDComponent","position","_c2","$RefreshReg$"],"sources":["/Users/trevorsykes/Desktop/react-portfolio/src/ThreeDImage.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\n\nconst GoldenRatioSpiral = () => {\n  const spiralPoints = useRef([]);\n  const line = useRef();\n\n  // Function to calculate points for the golden ratio spiral\n  const calculateSpiralPoints = () => {\n    const points = [];\n    const a = 1.61803398875; // Golden ratio\n\n    for (let i = 0; i < 1000; i++) {\n      const angle = i * 0.1;\n      const radius = a ** i * 0.01;\n\n      const x = radius * Math.cos(angle);\n      const y = radius * Math.sin(angle);\n      const z = i * 0.01;\n\n      points.push(new THREE.Vector3(x, y, z));\n    }\n\n    spiralPoints.current = points;\n  };\n\n  // Calculate spiral points on mount\n  calculateSpiralPoints();\n\n  // Custom hook to update the line position\n  useFrame(() => {\n    const time = window.performance.now() / 1000;\n\n    if (spiralPoints.current.length > 0 && line.current) {\n      const index = Math.floor(time * 0.5) % spiralPoints.current.length;\n      const currentPosition = spiralPoints.current[index];\n\n      const vertices = line.current.geometry.vertices;\n      vertices[0].set(0, 0, 0); // Starting point at the center\n      vertices[1].set(currentPosition.x, currentPosition.y, currentPosition.z);\n      verticesNeedUpdate = true;\n    }\n  });\n\n  return (\n    <line ref={line}>\n      <geometry vertices={[new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 0)]} />\n      <lineBasicMaterial color={0xff0000} />\n    </line>\n  );\n};\n\nconst ThreeDComponent = () => {\n  return (\n    <Canvas>\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <GoldenRatioSpiral />\n    </Canvas>\n  );\n};\n\nexport default ThreeDComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}