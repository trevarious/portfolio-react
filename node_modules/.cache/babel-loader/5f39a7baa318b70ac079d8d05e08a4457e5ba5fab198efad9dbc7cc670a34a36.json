{"ast":null,"code":"var _jsxFileName = \"/Users/trevorsykes/Desktop/react-portfolio/src/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport globeTexture from '../src/your-globe-texture.webp';\nimport './Globe.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Globe = () => {\n  _s();\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000);\n  const renderer = new THREE.WebGLRenderer({\n    antialias: true\n  }); // Enable antialiasing for smoother edges\n  const globeRef = useRef(null);\n  useEffect(() => {\n    // Set up renderer\n    renderer.setSize(window.innerWidth / 9, window.innerHeight / 9); // Adjust size as needed\n    globeRef.current.appendChild(renderer.domElement);\n\n    // Create a sphere geometry for the globe with higher segments\n    const geometry = new THREE.SphereGeometry(1, 64, 64); // Increased segments for a smoother surface\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(globeTexture); // Replace with your own texture\n    scene.background = new THREE.Color('transparent');\n\n    // Use MeshPhongMaterial for better lighting and shading\n    const material = new THREE.MeshPhongMaterial({\n      map: texture\n    });\n    const globeMesh = new THREE.Mesh(geometry, material);\n    // Add lights to the scene (you can adjust positions and colors as needed)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, .9);\n    directionalLight.position.set(0, 1, 0);\n    scene.add(globeMesh, ambientLight, directionalLight);\n\n    // Set camera position\n    camera.position.z = 3;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      globeMesh.rotation.y += 0.005;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up on component unmount\n    return () => {\n      globeRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, [renderer, scene, camera]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"globe\",\n    ref: globeRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n_s(Globe, \"RnDsAY9k2/HDGJbJqxvzVF3XlM4=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","globeTexture","jsxDEV","_jsxDEV","Globe","_s","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","globeRef","setSize","current","appendChild","domElement","geometry","SphereGeometry","textureLoader","TextureLoader","texture","load","background","Color","material","MeshPhongMaterial","map","globeMesh","Mesh","ambientLight","AmbientLight","directionalLight","DirectionalLight","position","set","add","z","animate","requestAnimationFrame","rotation","y","render","removeChild","dispose","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorsykes/Desktop/react-portfolio/src/Globe.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport globeTexture from '../src/your-globe-texture.webp';\nimport './Globe.css';\n\nconst Globe = () => {\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000);\n  const renderer = new THREE.WebGLRenderer({ antialias: true }); // Enable antialiasing for smoother edges\n  const globeRef = useRef(null);\n\n  useEffect(() => {\n    // Set up renderer\n    renderer.setSize(window.innerWidth / 9, window.innerHeight / 9); // Adjust size as needed\n    globeRef.current.appendChild(renderer.domElement);\n\n    // Create a sphere geometry for the globe with higher segments\n    const geometry = new THREE.SphereGeometry(1, 64, 64); // Increased segments for a smoother surface\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load(globeTexture); // Replace with your own texture\n    scene.background = new THREE.Color('transparent');\n\n    // Use MeshPhongMaterial for better lighting and shading\n    const material = new THREE.MeshPhongMaterial({ map: texture });\n    const globeMesh = new THREE.Mesh(geometry, material);\n    // Add lights to the scene (you can adjust positions and colors as needed)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, .9);\n    directionalLight.position.set(0, 1, 0);\n\n    scene.add(globeMesh, ambientLight, directionalLight);\n\n    // Set camera position\n    camera.position.z = 3;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      globeMesh.rotation.y += 0.005;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Clean up on component unmount\n    return () => {\n      globeRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, [renderer, scene, camera]);\n\n  return <div className='globe' ref={globeRef} />;\n};\n\nexport default Globe;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}