{"ast":null,"code":"var _jsxFileName = \"/Users/trevorsykes/Desktop/reactPortfolio/portfolio-react/src/SnowFall.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport snowflakeTexture from './snowflake-texture.png'; // Replace with your snowflake texture path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnowFall = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    let scene, camera, renderer, snowflakes;\n    const createScene = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 50;\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        canvas: canvasRef.current\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      const snowflakeGeometry = new THREE.PlaneGeometry(1, 1); // Use a plane geometry for more detailed snowflakes\n      const snowflakeTextureLoader = new THREE.TextureLoader();\n      const snowflakeTextureMap = snowflakeTextureLoader.load(snowflakeTexture);\n      const snowflakeMaterial = new THREE.MeshBasicMaterial({\n        map: snowflakeTextureMap,\n        transparent: true\n      });\n      snowflakes = [];\n      for (let i = 0; i < 500; i++) {\n        const snowflake = new THREE.Mesh(snowflakeGeometry, snowflakeMaterial);\n        snowflake.scale.set(0.5, 0.5, 1); // Adjust the scale of the snowflake\n        snowflake.position.x = Math.random() * 100 - 50;\n        snowflake.position.y = Math.random() * 100 - 50;\n        snowflake.position.z = Math.random() * 100 - 50;\n        scene.add(snowflake);\n        snowflakes.push(snowflake);\n      }\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Add ambient light for better visibility\n      scene.add(ambientLight);\n    };\n    const animate = () => {\n      requestAnimationFrame(animate);\n      snowflakes.forEach(snowflake => {\n        snowflake.position.y -= 0.1;\n        if (snowflake.position.y < -50) {\n          snowflake.position.y = 50;\n          snowflake.position.x = Math.random() * 100 - 50;\n          snowflake.position.z = Math.random() * 100 - 50;\n        }\n      });\n      renderer.render(scene, camera);\n    };\n    createScene();\n    animate();\n    const handleWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      // Clean up Three.js resources when component unmounts\n      scene.remove(...snowflakes);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(SnowFall, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = SnowFall;\nexport default SnowfallRealistic;\nvar _c;\n$RefreshReg$(_c, \"SnowFall\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","snowflakeTexture","jsxDEV","_jsxDEV","SnowFall","_s","canvasRef","scene","camera","renderer","snowflakes","createScene","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","z","WebGLRenderer","antialias","canvas","current","setSize","snowflakeGeometry","PlaneGeometry","snowflakeTextureLoader","TextureLoader","snowflakeTextureMap","load","snowflakeMaterial","MeshBasicMaterial","map","transparent","i","snowflake","Mesh","scale","set","x","Math","random","y","add","push","ambientLight","AmbientLight","animate","requestAnimationFrame","forEach","render","handleWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","remove","dispose","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","SnowfallRealistic","$RefreshReg$"],"sources":["/Users/trevorsykes/Desktop/reactPortfolio/portfolio-react/src/SnowFall.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport snowflakeTexture from './snowflake-texture.png'; // Replace with your snowflake texture path\n\nconst SnowFall = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    let scene, camera, renderer, snowflakes;\n\n    const createScene = () => {\n      scene = new THREE.Scene();\n\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 50;\n\n      renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvasRef.current });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n\n      const snowflakeGeometry = new THREE.PlaneGeometry(1, 1); // Use a plane geometry for more detailed snowflakes\n      const snowflakeTextureLoader = new THREE.TextureLoader();\n      const snowflakeTextureMap = snowflakeTextureLoader.load(snowflakeTexture);\n      const snowflakeMaterial = new THREE.MeshBasicMaterial({ map: snowflakeTextureMap, transparent: true });\n\n      snowflakes = [];\n\n      for (let i = 0; i < 500; i++) {\n        const snowflake = new THREE.Mesh(snowflakeGeometry, snowflakeMaterial);\n        snowflake.scale.set(0.5, 0.5, 1); // Adjust the scale of the snowflake\n        snowflake.position.x = Math.random() * 100 - 50;\n        snowflake.position.y = Math.random() * 100 - 50;\n        snowflake.position.z = Math.random() * 100 - 50;\n        scene.add(snowflake);\n        snowflakes.push(snowflake);\n      }\n\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Add ambient light for better visibility\n      scene.add(ambientLight);\n    };\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      snowflakes.forEach((snowflake) => {\n        snowflake.position.y -= 0.1;\n\n        if (snowflake.position.y < -50) {\n          snowflake.position.y = 50;\n          snowflake.position.x = Math.random() * 100 - 50;\n          snowflake.position.z = Math.random() * 100 - 50;\n        }\n      });\n\n      renderer.render(scene, camera);\n    };\n\n    createScene();\n    animate();\n\n    const handleWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      // Clean up Three.js resources when component unmounts\n      scene.remove(...snowflakes);\n      renderer.dispose();\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default SnowfallRealistic;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}