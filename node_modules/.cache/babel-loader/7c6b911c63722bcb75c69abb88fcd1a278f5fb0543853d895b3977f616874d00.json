{"ast":null,"code":"var _jsxFileName = \"/Users/trevorsykes/Desktop/reactPortfolio/portfolio-react/src/FloatingObjects.js\",\n  _s = $RefreshSig$();\n// FloatingObjects.js\n\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport './FullScreenAnimation.css'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FloatingObjects = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    let scene, camera, renderer, particles, particleCount, particleSystem;\n    const createSnow = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 100;\n      renderer = new THREE.WebGLRenderer({\n        alpha: true,\n        antialias: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      canvasRef.current.appendChild(renderer.domElement);\n      particleCount = 500;\n      particles = new THREE.Geometry();\n      const particleMaterial = new THREE.PointsMaterial({\n        color: 0xffffff,\n        size: 2,\n        map: new THREE.TextureLoader().load('https://threejsfundamentals.org/threejs/resources/images/snowflake1.png'),\n        blending: THREE.AdditiveBlending,\n        depthTest: false,\n        transparent: true\n      });\n      for (let i = 0; i < particleCount; i++) {\n        const particle = new THREE.Vector3(Math.random() * 2000 - 1000, Math.random() * 2000 - 1000, Math.random() * 2000 - 1000);\n        particle.velocity = new THREE.Vector3(0, -Math.random() * 0.5, 0);\n        particles.vertices.push(particle);\n      }\n      particleSystem = new THREE.Points(particles, particleMaterial);\n      scene.add(particleSystem);\n    };\n    const animateSnow = () => {\n      requestAnimationFrame(animateSnow);\n      particles.vertices.forEach(particle => {\n        particle.y -= Math.random() * 0.5;\n        if (particle.y < -1000) {\n          particle.y = 1000;\n        }\n      });\n      particleSystem.geometry.verticesNeedUpdate = true;\n      renderer.render(scene, camera);\n    };\n    createSnow();\n    animateSnow();\n    const handleWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      // Clean up Three.js resources when component unmounts\n      scene.remove(particleSystem);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 12\n  }, this);\n};\n_s(FloatingObjects, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = FloatingObjects;\nexport default FloatingObjects;\nvar _c;\n$RefreshReg$(_c, \"FloatingObjects\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","FloatingObjects","_s","canvasRef","scene","camera","renderer","particles","particleCount","particleSystem","createSnow","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","z","WebGLRenderer","alpha","antialias","setSize","setPixelRatio","devicePixelRatio","current","appendChild","domElement","Geometry","particleMaterial","PointsMaterial","color","size","map","TextureLoader","load","blending","AdditiveBlending","depthTest","transparent","i","particle","Vector3","Math","random","velocity","vertices","push","Points","add","animateSnow","requestAnimationFrame","forEach","y","geometry","verticesNeedUpdate","render","handleWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","remove","dispose","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorsykes/Desktop/reactPortfolio/portfolio-react/src/FloatingObjects.js"],"sourcesContent":["// FloatingObjects.js\n\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport './FullScreenAnimation.css'; // Import your CSS file\n\nconst FloatingObjects = () => {\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        let scene, camera, renderer, particles, particleCount, particleSystem;\n\n        const createSnow = () => {\n            scene = new THREE.Scene();\n            camera = new THREE.PerspectiveCamera(\n                75,\n                window.innerWidth / window.innerHeight,\n                1,\n                1000\n            );\n            camera.position.z = 100;\n\n            renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            renderer.setPixelRatio(window.devicePixelRatio);\n            canvasRef.current.appendChild(renderer.domElement);\n\n            particleCount = 500;\n            particles = new THREE.Geometry();\n\n            const particleMaterial = new THREE.PointsMaterial({\n                color: 0xffffff,\n                size: 2,\n                map: new THREE.TextureLoader().load(\n                    'https://threejsfundamentals.org/threejs/resources/images/snowflake1.png'\n                ),\n                blending: THREE.AdditiveBlending,\n                depthTest: false,\n                transparent: true,\n            });\n\n            for (let i = 0; i < particleCount; i++) {\n                const particle = new THREE.Vector3(\n                    Math.random() * 2000 - 1000,\n                    Math.random() * 2000 - 1000,\n                    Math.random() * 2000 - 1000\n                );\n                particle.velocity = new THREE.Vector3(\n                    0,\n                    -Math.random() * 0.5,\n                    0\n                );\n                particles.vertices.push(particle);\n            }\n\n            particleSystem = new THREE.Points(particles, particleMaterial);\n            scene.add(particleSystem);\n        };\n\n        const animateSnow = () => {\n            requestAnimationFrame(animateSnow);\n\n            particles.vertices.forEach((particle) => {\n                particle.y -= Math.random() * 0.5;\n                if (particle.y < -1000) {\n                    particle.y = 1000;\n                }\n            });\n\n            particleSystem.geometry.verticesNeedUpdate = true;\n\n            renderer.render(scene, camera);\n        };\n\n        createSnow();\n        animateSnow();\n\n        const handleWindowResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n\n        window.addEventListener('resize', handleWindowResize);\n\n        return () => {\n            window.removeEventListener('resize', handleWindowResize);\n            // Clean up Three.js resources when component unmounts\n            scene.remove(particleSystem);\n            renderer.dispose();\n        };\n    }, []);\n\n    return <div className=\"canvas-container\" ref={canvasRef}></div>;\n};\n\nexport default FloatingObjects;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}