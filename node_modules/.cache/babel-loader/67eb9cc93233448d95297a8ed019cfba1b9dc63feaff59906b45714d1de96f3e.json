{"ast":null,"code":"var _jsxFileName = \"/Users/trevorsykes/Desktop/reactPortfolio/portfolio-react/src/SnowFall.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnowfallWithText = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    let scene, camera, renderer, snowflakes, textMesh;\n    const createScene = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 50;\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        canvas: canvasRef.current\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      const snowflakeGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const snowflakeMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      snowflakes = [];\n      for (let i = 0; i < 500; i++) {\n        const snowflake = new THREE.Mesh(snowflakeGeometry, snowflakeMaterial);\n        snowflake.position.x = Math.random() * 100 - 50;\n        snowflake.position.y = Math.random() * 100 - 50;\n        snowflake.position.z = Math.random() * 100 - 50;\n        scene.add(snowflake);\n        snowflakes.push(snowflake);\n      }\n      const textGeometry = new THREE.TextGeometry('Hello, 3D World!', {\n        font: new THREE.Font(THREE.FontUtils.generateShapes({})),\n        // You need to provide a proper font here\n        size: 4,\n        height: 1\n      });\n      const textMaterial = new THREE.MeshBasicMaterial({\n        color: 0xff0000\n      });\n      textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      textMesh.position.set(-15, 0, 0);\n      scene.add(textMesh);\n    };\n    const animate = () => {\n      requestAnimationFrame(animate);\n      snowflakes.forEach(snowflake => {\n        snowflake.position.y -= 0.1;\n        if (snowflake.position.y < -50) {\n          snowflake.position.y = 50;\n          snowflake.position.x = Math.random() * 100 - 50;\n          snowflake.position.z = Math.random() * 100 - 50;\n        }\n      });\n      renderer.render(scene, camera);\n    };\n    createScene();\n    animate();\n    const handleWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      // Clean up Three.js resources when component unmounts\n      scene.remove(...snowflakes, textMesh);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 10\n  }, this);\n};\n_s(SnowfallWithText, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = SnowfallWithText;\nexport default SnowfallWithText;\nvar _c;\n$RefreshReg$(_c, \"SnowfallWithText\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","SnowfallWithText","_s","canvasRef","scene","camera","renderer","snowflakes","textMesh","createScene","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","z","WebGLRenderer","antialias","canvas","current","setSize","snowflakeGeometry","SphereGeometry","snowflakeMaterial","MeshBasicMaterial","color","i","snowflake","Mesh","x","Math","random","y","add","push","textGeometry","TextGeometry","font","Font","FontUtils","generateShapes","size","height","textMaterial","set","animate","requestAnimationFrame","forEach","render","handleWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","remove","dispose","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorsykes/Desktop/reactPortfolio/portfolio-react/src/SnowFall.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst SnowfallWithText = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    let scene, camera, renderer, snowflakes, textMesh;\n\n    const createScene = () => {\n      scene = new THREE.Scene();\n\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 50;\n\n      renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvasRef.current });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n\n      const snowflakeGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const snowflakeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\n      snowflakes = [];\n\n      for (let i = 0; i < 500; i++) {\n        const snowflake = new THREE.Mesh(snowflakeGeometry, snowflakeMaterial);\n        snowflake.position.x = Math.random() * 100 - 50;\n        snowflake.position.y = Math.random() * 100 - 50;\n        snowflake.position.z = Math.random() * 100 - 50;\n        scene.add(snowflake);\n        snowflakes.push(snowflake);\n      }\n\n      const textGeometry = new THREE.TextGeometry('Hello, 3D World!', {\n        font: new THREE.Font(THREE.FontUtils.generateShapes({})), // You need to provide a proper font here\n        size: 4,\n        height: 1,\n      });\n      const textMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n      textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      textMesh.position.set(-15, 0, 0);\n      scene.add(textMesh);\n    };\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      snowflakes.forEach((snowflake) => {\n        snowflake.position.y -= 0.1;\n\n        if (snowflake.position.y < -50) {\n          snowflake.position.y = 50;\n          snowflake.position.x = Math.random() * 100 - 50;\n          snowflake.position.z = Math.random() * 100 - 50;\n        }\n      });\n\n      renderer.render(scene, camera);\n    };\n\n    createScene();\n    animate();\n\n    const handleWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      // Clean up Three.js resources when component unmounts\n      scene.remove(...snowflakes, textMesh);\n      renderer.dispose();\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default SnowfallWithText;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}