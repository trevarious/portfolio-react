{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nconst SpriteAnimator = /* @__PURE__ */React.forwardRef(({\n  startFrame,\n  endFrame,\n  fps,\n  frameName,\n  textureDataURL,\n  textureImageURL,\n  loop,\n  numberOfFrames,\n  autoPlay,\n  animationNames,\n  onStart,\n  onEnd,\n  onLoopEnd,\n  onFrame,\n  play,\n  pause,\n  flipX,\n  alphaTest,\n  children,\n  asSprite,\n  resetOnEnd,\n  ...props\n}, fref) => {\n  const spriteData = React.useRef(null);\n  const [isJsonReady, setJsonReady] = React.useState(false);\n  const hasEnded = React.useRef(false);\n  const matRef = React.useRef();\n  const spriteRef = React.useRef();\n  const timerOffset = React.useRef(window.performance.now());\n  const textureData = React.useRef();\n  const currentFrame = React.useRef(startFrame || 0);\n  const currentFrameName = React.useRef(frameName || '');\n  const fpsInterval = 1000 / (fps || 30);\n  const [spriteTexture, setSpriteTexture] = React.useState(new THREE.Texture());\n  const totalFrames = React.useRef(0);\n  const [aspect, setAspect] = React.useState([1, 1, 1]);\n  const flipOffset = flipX ? -1 : 1;\n  const [displayAsSprite, setDisplayAsSprite] = React.useState(asSprite !== null && asSprite !== void 0 ? asSprite : true);\n  const pauseRef = React.useRef(pause);\n  function loadJsonAndTextureAndExecuteCallback(jsonUrl, textureUrl, callback) {\n    const textureLoader = new THREE.TextureLoader();\n    const jsonPromise = fetch(jsonUrl).then(response => response.json());\n    const texturePromise = new Promise(resolve => {\n      textureLoader.load(textureUrl, resolve);\n    });\n    Promise.all([jsonPromise, texturePromise]).then(response => {\n      callback(response[0], response[1]);\n    });\n  }\n  const calculateAspectRatio = (width, height) => {\n    const aspectRatio = height / width;\n    if (spriteRef.current) {\n      spriteRef.current.scale.set(1, aspectRatio, 1);\n    }\n    return [1, aspectRatio, 1];\n  };\n\n  // initial loads\n  React.useEffect(() => {\n    if (textureDataURL && textureImageURL) {\n      loadJsonAndTextureAndExecuteCallback(textureDataURL, textureImageURL, parseSpriteData);\n    } else if (textureImageURL) {\n      // only load the texture, this is an image sprite only\n      const textureLoader = new THREE.TextureLoader();\n      new Promise(resolve => {\n        textureLoader.load(textureImageURL, resolve);\n      }).then(texture => {\n        parseSpriteData(null, texture);\n      });\n    }\n  }, []);\n  React.useEffect(() => {\n    setDisplayAsSprite(asSprite !== null && asSprite !== void 0 ? asSprite : true);\n  }, [asSprite]);\n  React.useLayoutEffect(() => {\n    modifySpritePosition();\n  }, [spriteTexture, flipX]);\n  React.useEffect(() => {\n    if (autoPlay) {\n      pauseRef.current = false;\n    }\n  }, [autoPlay]);\n  React.useEffect(() => {\n    if (currentFrameName.current !== frameName && frameName) {\n      currentFrame.current = 0;\n      currentFrameName.current = frameName;\n      hasEnded.current = false;\n      modifySpritePosition();\n      if (spriteData.current) {\n        const {\n          w,\n          h\n        } = getFirstItem(spriteData.current.frames).sourceSize;\n        const _aspect = calculateAspectRatio(w, h);\n        setAspect(_aspect);\n      }\n    }\n  }, [frameName]);\n  const parseSpriteData = (json, _spriteTexture) => {\n    // sprite only case\n    if (json === null) {\n      if (numberOfFrames) {\n        //get size from texture\n        const width = _spriteTexture.image.width;\n        const height = _spriteTexture.image.height;\n        const frameWidth = width / numberOfFrames;\n        const frameHeight = height;\n        textureData.current = _spriteTexture;\n        totalFrames.current = numberOfFrames;\n        spriteData.current = {\n          frames: [],\n          meta: {\n            version: '1.0',\n            size: {\n              w: width,\n              h: height\n            },\n            scale: '1'\n          }\n        };\n        if (parseInt(frameWidth.toString(), 10) === frameWidth) {\n          // if it fits\n          for (let i = 0; i < numberOfFrames; i++) {\n            spriteData.current.frames.push({\n              frame: {\n                x: i * frameWidth,\n                y: 0,\n                w: frameWidth,\n                h: frameHeight\n              },\n              rotated: false,\n              trimmed: false,\n              spriteSourceSize: {\n                x: 0,\n                y: 0,\n                w: frameWidth,\n                h: frameHeight\n              },\n              sourceSize: {\n                w: frameWidth,\n                h: height\n              }\n            });\n          }\n        }\n      }\n    } else {\n      spriteData.current = json;\n      spriteData.current.frames = Array.isArray(json.frames) ? json.frames : parseFrames();\n      totalFrames.current = Array.isArray(json.frames) ? json.frames.length : Object.keys(json.frames).length;\n      textureData.current = _spriteTexture;\n      const {\n        w,\n        h\n      } = getFirstItem(json.frames).sourceSize;\n      const aspect = calculateAspectRatio(w, h);\n      setAspect(aspect);\n      if (matRef.current) {\n        matRef.current.map = _spriteTexture;\n      }\n    }\n    _spriteTexture.premultiplyAlpha = false;\n    setSpriteTexture(_spriteTexture);\n  };\n\n  // for frame based JSON Hash sprite data\n  const parseFrames = () => {\n    const sprites = {};\n    const data = spriteData.current;\n    const delimiters = animationNames;\n    if (delimiters) {\n      for (let i = 0; i < delimiters.length; i++) {\n        sprites[delimiters[i]] = [];\n        for (const innerKey in data['frames']) {\n          const value = data['frames'][innerKey];\n          const frameData = value['frame'];\n          const x = frameData['x'];\n          const y = frameData['y'];\n          const width = frameData['w'];\n          const height = frameData['h'];\n          const sourceWidth = value['sourceSize']['w'];\n          const sourceHeight = value['sourceSize']['h'];\n          if (innerKey.toLowerCase().indexOf(delimiters[i].toLowerCase()) !== -1) {\n            sprites[delimiters[i]].push({\n              x: x,\n              y: y,\n              w: width,\n              h: height,\n              frame: frameData,\n              sourceSize: {\n                w: sourceWidth,\n                h: sourceHeight\n              }\n            });\n          }\n        }\n      }\n      return sprites;\n    } else if (frameName) {\n      const spritesArr = [];\n      for (const key in data.frames) {\n        spritesArr.push(data.frames[key]);\n      }\n      return spritesArr;\n    }\n  };\n\n  // modify the sprite material after json is parsed and state updated\n  const modifySpritePosition = () => {\n    if (!spriteData.current) return;\n    const {\n      meta: {\n        size: metaInfo\n      },\n      frames\n    } = spriteData.current;\n    const {\n      w: frameW,\n      h: frameH\n    } = Array.isArray(frames) ? frames[0].sourceSize : frameName ? frames[frameName] ? frames[frameName][0].sourceSize : {\n      w: 0,\n      h: 0\n    } : {\n      w: 0,\n      h: 0\n    };\n    matRef.current.map.wrapS = matRef.current.map.wrapT = THREE.RepeatWrapping;\n    matRef.current.map.center.set(0, 0);\n    matRef.current.map.repeat.set(1 * flipOffset / (metaInfo.w / frameW), 1 / (metaInfo.h / frameH));\n\n    //const framesH = (metaInfo.w - 1) / frameW\n    const framesV = (metaInfo.h - 1) / frameH;\n    const frameOffsetY = 1 / framesV;\n    matRef.current.map.offset.x = 0.0; //-matRef.current.map.repeat.x\n    matRef.current.map.offset.y = 1 - frameOffsetY;\n    setJsonReady(true);\n    if (onStart) onStart({\n      currentFrameName: frameName,\n      currentFrame: currentFrame.current\n    });\n  };\n\n  // run the animation on each frame\n  const runAnimation = () => {\n    //if (!frameName) return\n    const now = window.performance.now();\n    const diff = now - timerOffset.current;\n    const {\n      meta: {\n        size: metaInfo\n      },\n      frames\n    } = spriteData.current;\n    const {\n      w: frameW,\n      h: frameH\n    } = getFirstItem(frames).sourceSize;\n    const spriteFrames = Array.isArray(frames) ? frames : frameName ? frames[frameName] : [];\n    const _endFrame = endFrame || spriteFrames.length - 1;\n    if (currentFrame.current > _endFrame) {\n      currentFrame.current = loop ? startFrame !== null && startFrame !== void 0 ? startFrame : 0 : 0;\n      if (loop) {\n        onLoopEnd == null || onLoopEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n      } else {\n        onEnd == null || onEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n        hasEnded.current = resetOnEnd ? false : true;\n        if (resetOnEnd) {\n          pauseRef.current = true;\n          //calculateFinalPosition(frameW, frameH, metaInfo, spriteFrames)\n        }\n      }\n\n      if (!loop) return;\n    }\n    if (diff <= fpsInterval) return;\n    timerOffset.current = now - diff % fpsInterval;\n    calculateFinalPosition(frameW, frameH, metaInfo, spriteFrames);\n    currentFrame.current += 1;\n  };\n  const calculateFinalPosition = (frameW, frameH, metaInfo, spriteFrames) => {\n    let finalValX = 0;\n    let finalValY = 0;\n    calculateAspectRatio(frameW, frameH);\n    const framesH = (metaInfo.w - 1) / frameW;\n    const framesV = (metaInfo.h - 1) / frameH;\n    const {\n      frame: {\n        x: frameX,\n        y: frameY\n      },\n      sourceSize: {\n        w: originalSizeX,\n        h: originalSizeY\n      }\n    } = spriteFrames[currentFrame.current];\n    const frameOffsetX = 1 / framesH;\n    const frameOffsetY = 1 / framesV;\n    finalValX = flipOffset > 0 ? frameOffsetX * (frameX / originalSizeX) : frameOffsetX * (frameX / originalSizeX) - matRef.current.map.repeat.x;\n    finalValY = Math.abs(1 - frameOffsetY) - frameOffsetY * (frameY / originalSizeY);\n    matRef.current.map.offset.x = finalValX;\n    matRef.current.map.offset.y = finalValY;\n  };\n\n  // *** Warning! It runs on every frame! ***\n  useFrame((_state, _delta) => {\n    var _spriteData$current, _matRef$current;\n    if (!((_spriteData$current = spriteData.current) != null && _spriteData$current.frames) || !((_matRef$current = matRef.current) != null && _matRef$current.map)) {\n      return;\n    }\n    if (pauseRef.current) {\n      return;\n    }\n    if (!hasEnded.current && (autoPlay || play)) {\n      runAnimation();\n      onFrame && onFrame({\n        currentFrameName: currentFrameName.current,\n        currentFrame: currentFrame.current\n      });\n    }\n  });\n\n  // utils\n  const getFirstItem = param => {\n    if (Array.isArray(param)) {\n      return param[0];\n    } else if (typeof param === 'object' && param !== null) {\n      const keys = Object.keys(param);\n      return frameName ? param[frameName][0] : param[keys[0]][0];\n    } else {\n      return {\n        w: 0,\n        h: 0\n      };\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: fref\n  }, props), /*#__PURE__*/React.createElement(React.Suspense, {\n    fallback: null\n  }, displayAsSprite && /*#__PURE__*/React.createElement(\"sprite\", {\n    ref: spriteRef,\n    scale: aspect\n  }, /*#__PURE__*/React.createElement(\"spriteMaterial\", {\n    toneMapped: false,\n    ref: matRef,\n    map: spriteTexture,\n    transparent: true,\n    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0.0\n  })), !displayAsSprite && /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: spriteRef,\n    scale: aspect\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    toneMapped: false,\n    side: THREE.DoubleSide,\n    ref: matRef,\n    map: spriteTexture,\n    transparent: true,\n    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0.0\n  }))), children);\n});\nexport { SpriteAnimator };","map":{"version":3,"names":["_extends","React","useFrame","THREE","SpriteAnimator","forwardRef","startFrame","endFrame","fps","frameName","textureDataURL","textureImageURL","loop","numberOfFrames","autoPlay","animationNames","onStart","onEnd","onLoopEnd","onFrame","play","pause","flipX","alphaTest","children","asSprite","resetOnEnd","props","fref","spriteData","useRef","isJsonReady","setJsonReady","useState","hasEnded","matRef","spriteRef","timerOffset","window","performance","now","textureData","currentFrame","currentFrameName","fpsInterval","spriteTexture","setSpriteTexture","Texture","totalFrames","aspect","setAspect","flipOffset","displayAsSprite","setDisplayAsSprite","pauseRef","loadJsonAndTextureAndExecuteCallback","jsonUrl","textureUrl","callback","textureLoader","TextureLoader","jsonPromise","fetch","then","response","json","texturePromise","Promise","resolve","load","all","calculateAspectRatio","width","height","aspectRatio","current","scale","set","useEffect","parseSpriteData","texture","useLayoutEffect","modifySpritePosition","w","h","getFirstItem","frames","sourceSize","_aspect","_spriteTexture","image","frameWidth","frameHeight","meta","version","size","parseInt","toString","i","push","frame","x","y","rotated","trimmed","spriteSourceSize","Array","isArray","parseFrames","length","Object","keys","map","premultiplyAlpha","sprites","data","delimiters","innerKey","value","frameData","sourceWidth","sourceHeight","toLowerCase","indexOf","spritesArr","key","metaInfo","frameW","frameH","wrapS","wrapT","RepeatWrapping","center","repeat","framesV","frameOffsetY","offset","runAnimation","diff","spriteFrames","_endFrame","calculateFinalPosition","finalValX","finalValY","framesH","frameX","frameY","originalSizeX","originalSizeY","frameOffsetX","Math","abs","_state","_delta","_spriteData$current","_matRef$current","param","createElement","ref","Suspense","fallback","toneMapped","transparent","args","side","DoubleSide"],"sources":["/Users/trevorsykes/Desktop/tic-tac-toe/node_modules/@react-three/drei/core/SpriteAnimator.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nconst SpriteAnimator = /* @__PURE__ */React.forwardRef(({\n  startFrame,\n  endFrame,\n  fps,\n  frameName,\n  textureDataURL,\n  textureImageURL,\n  loop,\n  numberOfFrames,\n  autoPlay,\n  animationNames,\n  onStart,\n  onEnd,\n  onLoopEnd,\n  onFrame,\n  play,\n  pause,\n  flipX,\n  alphaTest,\n  children,\n  asSprite,\n  resetOnEnd,\n  ...props\n}, fref) => {\n  const spriteData = React.useRef(null);\n  const [isJsonReady, setJsonReady] = React.useState(false);\n  const hasEnded = React.useRef(false);\n  const matRef = React.useRef();\n  const spriteRef = React.useRef();\n  const timerOffset = React.useRef(window.performance.now());\n  const textureData = React.useRef();\n  const currentFrame = React.useRef(startFrame || 0);\n  const currentFrameName = React.useRef(frameName || '');\n  const fpsInterval = 1000 / (fps || 30);\n  const [spriteTexture, setSpriteTexture] = React.useState(new THREE.Texture());\n  const totalFrames = React.useRef(0);\n  const [aspect, setAspect] = React.useState([1, 1, 1]);\n  const flipOffset = flipX ? -1 : 1;\n  const [displayAsSprite, setDisplayAsSprite] = React.useState(asSprite !== null && asSprite !== void 0 ? asSprite : true);\n  const pauseRef = React.useRef(pause);\n  function loadJsonAndTextureAndExecuteCallback(jsonUrl, textureUrl, callback) {\n    const textureLoader = new THREE.TextureLoader();\n    const jsonPromise = fetch(jsonUrl).then(response => response.json());\n    const texturePromise = new Promise(resolve => {\n      textureLoader.load(textureUrl, resolve);\n    });\n    Promise.all([jsonPromise, texturePromise]).then(response => {\n      callback(response[0], response[1]);\n    });\n  }\n  const calculateAspectRatio = (width, height) => {\n    const aspectRatio = height / width;\n    if (spriteRef.current) {\n      spriteRef.current.scale.set(1, aspectRatio, 1);\n    }\n    return [1, aspectRatio, 1];\n  };\n\n  // initial loads\n  React.useEffect(() => {\n    if (textureDataURL && textureImageURL) {\n      loadJsonAndTextureAndExecuteCallback(textureDataURL, textureImageURL, parseSpriteData);\n    } else if (textureImageURL) {\n      // only load the texture, this is an image sprite only\n      const textureLoader = new THREE.TextureLoader();\n      new Promise(resolve => {\n        textureLoader.load(textureImageURL, resolve);\n      }).then(texture => {\n        parseSpriteData(null, texture);\n      });\n    }\n  }, []);\n  React.useEffect(() => {\n    setDisplayAsSprite(asSprite !== null && asSprite !== void 0 ? asSprite : true);\n  }, [asSprite]);\n  React.useLayoutEffect(() => {\n    modifySpritePosition();\n  }, [spriteTexture, flipX]);\n  React.useEffect(() => {\n    if (autoPlay) {\n      pauseRef.current = false;\n    }\n  }, [autoPlay]);\n  React.useEffect(() => {\n    if (currentFrameName.current !== frameName && frameName) {\n      currentFrame.current = 0;\n      currentFrameName.current = frameName;\n      hasEnded.current = false;\n      modifySpritePosition();\n      if (spriteData.current) {\n        const {\n          w,\n          h\n        } = getFirstItem(spriteData.current.frames).sourceSize;\n        const _aspect = calculateAspectRatio(w, h);\n        setAspect(_aspect);\n      }\n    }\n  }, [frameName]);\n  const parseSpriteData = (json, _spriteTexture) => {\n    // sprite only case\n    if (json === null) {\n      if (numberOfFrames) {\n        //get size from texture\n        const width = _spriteTexture.image.width;\n        const height = _spriteTexture.image.height;\n        const frameWidth = width / numberOfFrames;\n        const frameHeight = height;\n        textureData.current = _spriteTexture;\n        totalFrames.current = numberOfFrames;\n        spriteData.current = {\n          frames: [],\n          meta: {\n            version: '1.0',\n            size: {\n              w: width,\n              h: height\n            },\n            scale: '1'\n          }\n        };\n        if (parseInt(frameWidth.toString(), 10) === frameWidth) {\n          // if it fits\n          for (let i = 0; i < numberOfFrames; i++) {\n            spriteData.current.frames.push({\n              frame: {\n                x: i * frameWidth,\n                y: 0,\n                w: frameWidth,\n                h: frameHeight\n              },\n              rotated: false,\n              trimmed: false,\n              spriteSourceSize: {\n                x: 0,\n                y: 0,\n                w: frameWidth,\n                h: frameHeight\n              },\n              sourceSize: {\n                w: frameWidth,\n                h: height\n              }\n            });\n          }\n        }\n      }\n    } else {\n      spriteData.current = json;\n      spriteData.current.frames = Array.isArray(json.frames) ? json.frames : parseFrames();\n      totalFrames.current = Array.isArray(json.frames) ? json.frames.length : Object.keys(json.frames).length;\n      textureData.current = _spriteTexture;\n      const {\n        w,\n        h\n      } = getFirstItem(json.frames).sourceSize;\n      const aspect = calculateAspectRatio(w, h);\n      setAspect(aspect);\n      if (matRef.current) {\n        matRef.current.map = _spriteTexture;\n      }\n    }\n    _spriteTexture.premultiplyAlpha = false;\n    setSpriteTexture(_spriteTexture);\n  };\n\n  // for frame based JSON Hash sprite data\n  const parseFrames = () => {\n    const sprites = {};\n    const data = spriteData.current;\n    const delimiters = animationNames;\n    if (delimiters) {\n      for (let i = 0; i < delimiters.length; i++) {\n        sprites[delimiters[i]] = [];\n        for (const innerKey in data['frames']) {\n          const value = data['frames'][innerKey];\n          const frameData = value['frame'];\n          const x = frameData['x'];\n          const y = frameData['y'];\n          const width = frameData['w'];\n          const height = frameData['h'];\n          const sourceWidth = value['sourceSize']['w'];\n          const sourceHeight = value['sourceSize']['h'];\n          if (innerKey.toLowerCase().indexOf(delimiters[i].toLowerCase()) !== -1) {\n            sprites[delimiters[i]].push({\n              x: x,\n              y: y,\n              w: width,\n              h: height,\n              frame: frameData,\n              sourceSize: {\n                w: sourceWidth,\n                h: sourceHeight\n              }\n            });\n          }\n        }\n      }\n      return sprites;\n    } else if (frameName) {\n      const spritesArr = [];\n      for (const key in data.frames) {\n        spritesArr.push(data.frames[key]);\n      }\n      return spritesArr;\n    }\n  };\n\n  // modify the sprite material after json is parsed and state updated\n  const modifySpritePosition = () => {\n    if (!spriteData.current) return;\n    const {\n      meta: {\n        size: metaInfo\n      },\n      frames\n    } = spriteData.current;\n    const {\n      w: frameW,\n      h: frameH\n    } = Array.isArray(frames) ? frames[0].sourceSize : frameName ? frames[frameName] ? frames[frameName][0].sourceSize : {\n      w: 0,\n      h: 0\n    } : {\n      w: 0,\n      h: 0\n    };\n    matRef.current.map.wrapS = matRef.current.map.wrapT = THREE.RepeatWrapping;\n    matRef.current.map.center.set(0, 0);\n    matRef.current.map.repeat.set(1 * flipOffset / (metaInfo.w / frameW), 1 / (metaInfo.h / frameH));\n\n    //const framesH = (metaInfo.w - 1) / frameW\n    const framesV = (metaInfo.h - 1) / frameH;\n    const frameOffsetY = 1 / framesV;\n    matRef.current.map.offset.x = 0.0; //-matRef.current.map.repeat.x\n    matRef.current.map.offset.y = 1 - frameOffsetY;\n    setJsonReady(true);\n    if (onStart) onStart({\n      currentFrameName: frameName,\n      currentFrame: currentFrame.current\n    });\n  };\n\n  // run the animation on each frame\n  const runAnimation = () => {\n    //if (!frameName) return\n    const now = window.performance.now();\n    const diff = now - timerOffset.current;\n    const {\n      meta: {\n        size: metaInfo\n      },\n      frames\n    } = spriteData.current;\n    const {\n      w: frameW,\n      h: frameH\n    } = getFirstItem(frames).sourceSize;\n    const spriteFrames = Array.isArray(frames) ? frames : frameName ? frames[frameName] : [];\n    const _endFrame = endFrame || spriteFrames.length - 1;\n    if (currentFrame.current > _endFrame) {\n      currentFrame.current = loop ? startFrame !== null && startFrame !== void 0 ? startFrame : 0 : 0;\n      if (loop) {\n        onLoopEnd == null || onLoopEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n      } else {\n        onEnd == null || onEnd({\n          currentFrameName: frameName,\n          currentFrame: currentFrame.current\n        });\n        hasEnded.current = resetOnEnd ? false : true;\n        if (resetOnEnd) {\n          pauseRef.current = true;\n          //calculateFinalPosition(frameW, frameH, metaInfo, spriteFrames)\n        }\n      }\n\n      if (!loop) return;\n    }\n    if (diff <= fpsInterval) return;\n    timerOffset.current = now - diff % fpsInterval;\n    calculateFinalPosition(frameW, frameH, metaInfo, spriteFrames);\n    currentFrame.current += 1;\n  };\n  const calculateFinalPosition = (frameW, frameH, metaInfo, spriteFrames) => {\n    let finalValX = 0;\n    let finalValY = 0;\n    calculateAspectRatio(frameW, frameH);\n    const framesH = (metaInfo.w - 1) / frameW;\n    const framesV = (metaInfo.h - 1) / frameH;\n    const {\n      frame: {\n        x: frameX,\n        y: frameY\n      },\n      sourceSize: {\n        w: originalSizeX,\n        h: originalSizeY\n      }\n    } = spriteFrames[currentFrame.current];\n    const frameOffsetX = 1 / framesH;\n    const frameOffsetY = 1 / framesV;\n    finalValX = flipOffset > 0 ? frameOffsetX * (frameX / originalSizeX) : frameOffsetX * (frameX / originalSizeX) - matRef.current.map.repeat.x;\n    finalValY = Math.abs(1 - frameOffsetY) - frameOffsetY * (frameY / originalSizeY);\n    matRef.current.map.offset.x = finalValX;\n    matRef.current.map.offset.y = finalValY;\n  };\n\n  // *** Warning! It runs on every frame! ***\n  useFrame((_state, _delta) => {\n    var _spriteData$current, _matRef$current;\n    if (!((_spriteData$current = spriteData.current) != null && _spriteData$current.frames) || !((_matRef$current = matRef.current) != null && _matRef$current.map)) {\n      return;\n    }\n    if (pauseRef.current) {\n      return;\n    }\n    if (!hasEnded.current && (autoPlay || play)) {\n      runAnimation();\n      onFrame && onFrame({\n        currentFrameName: currentFrameName.current,\n        currentFrame: currentFrame.current\n      });\n    }\n  });\n\n  // utils\n  const getFirstItem = param => {\n    if (Array.isArray(param)) {\n      return param[0];\n    } else if (typeof param === 'object' && param !== null) {\n      const keys = Object.keys(param);\n      return frameName ? param[frameName][0] : param[keys[0]][0];\n    } else {\n      return {\n        w: 0,\n        h: 0\n      };\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: fref\n  }, props), /*#__PURE__*/React.createElement(React.Suspense, {\n    fallback: null\n  }, displayAsSprite && /*#__PURE__*/React.createElement(\"sprite\", {\n    ref: spriteRef,\n    scale: aspect\n  }, /*#__PURE__*/React.createElement(\"spriteMaterial\", {\n    toneMapped: false,\n    ref: matRef,\n    map: spriteTexture,\n    transparent: true,\n    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0.0\n  })), !displayAsSprite && /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: spriteRef,\n    scale: aspect\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    toneMapped: false,\n    side: THREE.DoubleSide,\n    ref: matRef,\n    map: spriteTexture,\n    transparent: true,\n    alphaTest: alphaTest !== null && alphaTest !== void 0 ? alphaTest : 0.0\n  }))), children);\n});\n\nexport { SpriteAnimator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}