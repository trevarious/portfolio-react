{"ast":null,"code":"import { Vector3 } from \"three\";\nclass STLExporter {\n  parse(scene, options = {}) {\n    options = Object.assign({\n      binary: false\n    }, options);\n    const binary = options.binary;\n    const objects = [];\n    let triangles = 0;\n    scene.traverse(function (object) {\n      if (object.isMesh) {\n        const geometry = object.geometry;\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute(\"position\");\n        triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        objects.push({\n          object3d: object,\n          geometry\n        });\n      }\n    });\n    let output;\n    let offset = 80;\n    if (binary === true) {\n      const bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      output = new DataView(arrayBuffer);\n      output.setUint32(offset, triangles, true);\n      offset += 4;\n    } else {\n      output = \"\";\n      output += \"solid exported\\n\";\n    }\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const cb = new Vector3();\n    const ab = new Vector3();\n    const normal = new Vector3();\n    for (let i = 0, il = objects.length; i < il; i++) {\n      const object = objects[i].object3d;\n      const geometry = objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute(\"position\");\n      if (index !== null) {\n        for (let j = 0; j < index.count; j += 3) {\n          const a = index.getX(j + 0);\n          const b = index.getX(j + 1);\n          const c = index.getX(j + 2);\n          writeFace(a, b, c, positionAttribute, object);\n        }\n      } else {\n        for (let j = 0; j < positionAttribute.count; j += 3) {\n          const a = j + 0;\n          const b = j + 1;\n          const c = j + 2;\n          writeFace(a, b, c, positionAttribute, object);\n        }\n      }\n    }\n    if (binary === false) {\n      output += \"endsolid exported\\n\";\n    }\n    return output;\n    function writeFace(a, b, c, positionAttribute, object) {\n      vA.fromBufferAttribute(positionAttribute, a);\n      vB.fromBufferAttribute(positionAttribute, b);\n      vC.fromBufferAttribute(positionAttribute, c);\n      if (object.isSkinnedMesh === true) {\n        object.applyBoneTransform(a, vA);\n        object.applyBoneTransform(b, vB);\n        object.applyBoneTransform(c, vC);\n      }\n      vA.applyMatrix4(object.matrixWorld);\n      vB.applyMatrix4(object.matrixWorld);\n      vC.applyMatrix4(object.matrixWorld);\n      writeNormal(vA, vB, vC);\n      writeVertex(vA);\n      writeVertex(vB);\n      writeVertex(vC);\n      if (binary === true) {\n        output.setUint16(offset, 0, true);\n        offset += 2;\n      } else {\n        output += \"\t\tendloop\\n\";\n        output += \"\tendfacet\\n\";\n      }\n    }\n    function writeNormal(vA2, vB2, vC2) {\n      cb.subVectors(vC2, vB2);\n      ab.subVectors(vA2, vB2);\n      cb.cross(ab).normalize();\n      normal.copy(cb).normalize();\n      if (binary === true) {\n        output.setFloat32(offset, normal.x, true);\n        offset += 4;\n        output.setFloat32(offset, normal.y, true);\n        offset += 4;\n        output.setFloat32(offset, normal.z, true);\n        offset += 4;\n      } else {\n        output += \"\tfacet normal \" + normal.x + \" \" + normal.y + \" \" + normal.z + \"\\n\";\n        output += \"\t\touter loop\\n\";\n      }\n    }\n    function writeVertex(vertex) {\n      if (binary === true) {\n        output.setFloat32(offset, vertex.x, true);\n        offset += 4;\n        output.setFloat32(offset, vertex.y, true);\n        offset += 4;\n        output.setFloat32(offset, vertex.z, true);\n        offset += 4;\n      } else {\n        output += \"\t\t\tvertex \" + vertex.x + \" \" + vertex.y + \" \" + vertex.z + \"\\n\";\n      }\n    }\n  }\n}\nexport { STLExporter };","map":{"version":3,"names":["STLExporter","parse","scene","options","Object","assign","binary","objects","triangles","traverse","object","isMesh","geometry","index","positionAttribute","getAttribute","count","push","object3d","output","offset","bufferLength","arrayBuffer","ArrayBuffer","DataView","setUint32","vA","Vector3","vB","vC","cb","ab","normal","i","il","length","j","a","getX","b","c","writeFace","fromBufferAttribute","isSkinnedMesh","applyBoneTransform","applyMatrix4","matrixWorld","writeNormal","writeVertex","setUint16","vA2","vB2","vC2","subVectors","cross","normalize","copy","setFloat32","x","y","z","vertex"],"sources":["/Users/trevorsykes/Desktop/tic-tac-toe/node_modules/src/exporters/STLExporter.js"],"sourcesContent":["import { Vector3 } from 'three'\n\n/**\n * Usage:\n *  const exporter = new STLExporter();\n *\n *  // second argument is a list of options\n *  const data = exporter.parse( mesh, { binary: true } );\n *\n */\n\nclass STLExporter {\n  parse(scene, options = {}) {\n    options = Object.assign(\n      {\n        binary: false,\n      },\n      options,\n    )\n\n    const binary = options.binary\n\n    //\n\n    const objects = []\n    let triangles = 0\n\n    scene.traverse(function (object) {\n      if (object.isMesh) {\n        const geometry = object.geometry\n\n        const index = geometry.index\n        const positionAttribute = geometry.getAttribute('position')\n\n        triangles += index !== null ? index.count / 3 : positionAttribute.count / 3\n\n        objects.push({\n          object3d: object,\n          geometry: geometry,\n        })\n      }\n    })\n\n    let output\n    let offset = 80 // skip header\n\n    if (binary === true) {\n      const bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4\n      const arrayBuffer = new ArrayBuffer(bufferLength)\n      output = new DataView(arrayBuffer)\n      output.setUint32(offset, triangles, true)\n      offset += 4\n    } else {\n      output = ''\n      output += 'solid exported\\n'\n    }\n\n    const vA = new Vector3()\n    const vB = new Vector3()\n    const vC = new Vector3()\n    const cb = new Vector3()\n    const ab = new Vector3()\n    const normal = new Vector3()\n\n    for (let i = 0, il = objects.length; i < il; i++) {\n      const object = objects[i].object3d\n      const geometry = objects[i].geometry\n\n      const index = geometry.index\n      const positionAttribute = geometry.getAttribute('position')\n\n      if (index !== null) {\n        // indexed geometry\n\n        for (let j = 0; j < index.count; j += 3) {\n          const a = index.getX(j + 0)\n          const b = index.getX(j + 1)\n          const c = index.getX(j + 2)\n\n          writeFace(a, b, c, positionAttribute, object)\n        }\n      } else {\n        // non-indexed geometry\n\n        for (let j = 0; j < positionAttribute.count; j += 3) {\n          const a = j + 0\n          const b = j + 1\n          const c = j + 2\n\n          writeFace(a, b, c, positionAttribute, object)\n        }\n      }\n    }\n\n    if (binary === false) {\n      output += 'endsolid exported\\n'\n    }\n\n    return output\n\n    function writeFace(a, b, c, positionAttribute, object) {\n      vA.fromBufferAttribute(positionAttribute, a)\n      vB.fromBufferAttribute(positionAttribute, b)\n      vC.fromBufferAttribute(positionAttribute, c)\n\n      if (object.isSkinnedMesh === true) {\n        object.applyBoneTransform(a, vA)\n        object.applyBoneTransform(b, vB)\n        object.applyBoneTransform(c, vC)\n      }\n\n      vA.applyMatrix4(object.matrixWorld)\n      vB.applyMatrix4(object.matrixWorld)\n      vC.applyMatrix4(object.matrixWorld)\n\n      writeNormal(vA, vB, vC)\n\n      writeVertex(vA)\n      writeVertex(vB)\n      writeVertex(vC)\n\n      if (binary === true) {\n        output.setUint16(offset, 0, true)\n        offset += 2\n      } else {\n        output += '\\t\\tendloop\\n'\n        output += '\\tendfacet\\n'\n      }\n    }\n\n    function writeNormal(vA, vB, vC) {\n      cb.subVectors(vC, vB)\n      ab.subVectors(vA, vB)\n      cb.cross(ab).normalize()\n\n      normal.copy(cb).normalize()\n\n      if (binary === true) {\n        output.setFloat32(offset, normal.x, true)\n        offset += 4\n        output.setFloat32(offset, normal.y, true)\n        offset += 4\n        output.setFloat32(offset, normal.z, true)\n        offset += 4\n      } else {\n        output += '\\tfacet normal ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n'\n        output += '\\t\\touter loop\\n'\n      }\n    }\n\n    function writeVertex(vertex) {\n      if (binary === true) {\n        output.setFloat32(offset, vertex.x, true)\n        offset += 4\n        output.setFloat32(offset, vertex.y, true)\n        offset += 4\n        output.setFloat32(offset, vertex.z, true)\n        offset += 4\n      } else {\n        output += '\\t\\t\\tvertex ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n'\n      }\n    }\n  }\n}\n\nexport { STLExporter }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}