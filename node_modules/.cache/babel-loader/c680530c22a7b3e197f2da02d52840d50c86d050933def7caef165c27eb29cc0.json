{"ast":null,"code":"import Panel from \"./panel.js\";\nconst _Stats = class _Stats {\n  constructor({\n    logsPerSecond = 20,\n    samplesLog = 100,\n    samplesGraph = 10,\n    precision = 2,\n    minimal = false,\n    horizontal = true,\n    mode = 0\n  } = {}) {\n    this.totalCpuDuration = 0;\n    this.totalGpuDuration = 0;\n    this.totalFps = 0;\n    this.activeQuery = null;\n    this.gpuQueries = [];\n    this.renderCount = 0;\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.dom = document.createElement(\"div\");\n    this.dom.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.dom.style.cssText += \"cursor:pointer\";\n    }\n    this.gl = null;\n    this.query = null;\n    this.isRunningCPUProfiling = false;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.renderCount = 0;\n    this.threeRendererPatched = false;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.dom.addEventListener(\"click\", event => {\n        event.preventDefault();\n        this.showPanel(++this.mode % this.dom.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", () => {\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  patchThreeRenderer(renderer) {\n    const originalRenderMethod = renderer.render;\n    const statsInstance = this;\n    renderer.render = function (scene, camera) {\n      statsInstance.begin();\n      originalRenderMethod.call(this, scene, camera);\n      statsInstance.end();\n    };\n    this.threeRendererPatched = true;\n  }\n  resizePanel(panel, offset) {\n    panel.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel.canvas.style.display = \"none\";\n    } else {\n      panel.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel.canvas.style.top = \"0px\";\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n      } else {\n        panel.canvas.style.left = \"0px\";\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel, offset) {\n    if (panel.canvas) {\n      this.dom.appendChild(panel.canvas);\n      this.resizePanel(panel, offset);\n    }\n    return panel;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.dom.children.length; i++) {\n      const child = this.dom.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  init(canvasOrGL) {\n    if (!canvasOrGL) {\n      console.error('Stats: The \"canvas\" parameter is undefined.');\n      return;\n    }\n    if (canvasOrGL.isWebGLRenderer && !this.threeRendererPatched) {\n      const canvas = canvasOrGL;\n      this.patchThreeRenderer(canvas);\n      this.gl = canvas.getContext();\n    }\n    if (!this.gl && canvasOrGL instanceof WebGL2RenderingContext) {\n      this.gl = canvasOrGL;\n    } else if (!this.gl && canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\n      this.gl = canvasOrGL.getContext(\"webgl2\");\n      if (!this.gl) {\n        console.error(\"Stats: Unable to obtain WebGL2 context.\");\n        return;\n      }\n    } else if (!this.gl) {\n      console.error(\"Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.\");\n      return;\n    }\n    this.ext = this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new _Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    }\n  }\n  begin() {\n    if (!this.isRunningCPUProfiling) {\n      this.beginProfiling(\"cpu-started\");\n    }\n    if (!this.gl || !this.ext) return;\n    if (this.gl && this.ext) {\n      if (this.activeQuery) {\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      }\n      this.activeQuery = this.gl.createQuery();\n      if (this.activeQuery !== null) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.activeQuery);\n      }\n    }\n  }\n  end() {\n    this.renderCount++;\n    if (this.gl && this.ext && this.activeQuery) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      this.gpuQueries.push({\n        query: this.activeQuery\n      });\n      this.activeQuery = null;\n    }\n  }\n  processGpuQueries() {\n    if (!this.gl || !this.ext) return;\n    this.totalGpuDuration = 0;\n    this.gpuQueries.forEach((queryInfo, index) => {\n      if (this.gl) {\n        const available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);\n        const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n        if (available && !disjoint) {\n          const elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);\n          const duration = elapsed * 1e-6;\n          this.totalGpuDuration += duration;\n          this.gl.deleteQuery(queryInfo.query);\n          this.gpuQueries.splice(index, 1);\n        }\n      }\n    });\n  }\n  update() {\n    this.processGpuQueries();\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\");\n    this.addToAverage(this.totalCpuDuration, this.averageCpu);\n    this.addToAverage(this.totalGpuDuration, this.averageGpu);\n    this.renderCount = 0;\n    this.totalCpuDuration = 0;\n    this.totalGpuDuration = 0;\n    this.totalFps = 0;\n    this.beginTime = this.endInternal();\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n      this.prevCpuTime = time;\n    }\n    if (time >= this.prevTime + 1e3) {\n      const fps = this.frames * 1e3 / (time - this.prevTime);\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n      this.isRunningCPUProfiling = true;\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName) {\n    if (window.performance && endMarker && this.isRunningCPUProfiling) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.totalCpuDuration += cpuMeasure.duration;\n      this.isRunningCPUProfiling = false;\n    }\n  }\n  updatePanel(panel, averageArray) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n    }\n  }\n  get domElement() {\n    return this.dom;\n  }\n  get container() {\n    console.warn(\"Stats: Deprecated! this.container as been replaced to this.dom \");\n    return this.dom;\n  }\n};\n_Stats.Panel = Panel;\nlet Stats = _Stats;\nexport { Stats as default };","map":{"version":3,"names":["_Stats","constructor","logsPerSecond","samplesLog","samplesGraph","precision","minimal","horizontal","mode","totalCpuDuration","totalGpuDuration","totalFps","activeQuery","gpuQueries","renderCount","dom","document","createElement","style","cssText","gl","query","isRunningCPUProfiling","beginTime","performance","Date","now","prevTime","prevCpuTime","frames","threeRendererPatched","averageCpu","logs","graph","averageGpu","queryCreated","fpsPanel","addPanel","Panel","msPanel","gpuPanel","addEventListener","event","preventDefault","showPanel","children","length","window","resizePanel","patchThreeRenderer","renderer","originalRenderMethod","render","statsInstance","scene","camera","begin","call","end","panel","offset","canvas","position","display","top","left","WIDTH","PR","HEIGHT","appendChild","id","i","child","init","canvasOrGL","console","error","isWebGLRenderer","getContext","WebGL2RenderingContext","HTMLCanvasElement","OffscreenCanvas","ext","getExtension","beginProfiling","endQuery","TIME_ELAPSED_EXT","createQuery","beginQuery","push","processGpuQueries","forEach","queryInfo","index","available","getQueryParameter","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","elapsed","QUERY_RESULT","duration","deleteQuery","splice","update","endProfiling","addToAverage","endInternal","time","updatePanel","fps","value","averageArray","shift","marker","mark","startMarker","endMarker","measureName","cpuMeasure","measure","sumLog","max","sumGraph","maxGraph","Math","min","domElement","container","warn","Stats"],"sources":["/Users/trevorsykes/Desktop/tic-tac-toe/node_modules/stats-gl/lib/main.ts"],"sourcesContent":["import Panel from \"./panel\";\nimport * as THREE from 'three';\nexport interface AverageArray {\n  logs: number[];\n  graph: number[];\n}\n\n\nclass Stats {\n  totalCpuDuration: number = 0;\n  totalGpuDuration: number = 0;\n  totalFps: number = 0;\n  mode: number;\n  dom: HTMLDivElement;\n  minimal: boolean;\n  horizontal: boolean;\n  beginTime: number;\n  prevTime: number;\n  prevCpuTime: number;\n  frames: number;\n  averageCpu: AverageArray;\n  averageGpu: AverageArray;\n  queryCreated: boolean;\n  isRunningCPUProfiling: boolean;\n  fpsPanel: Panel;\n  static Panel: typeof Panel = Panel;\n  msPanel: Panel;\n  gpuPanel: Panel | null;\n  samplesLog: number;\n  samplesGraph: number;\n  logsPerSecond: number;\n  activeQuery: WebGLQuery | null = null;\n\n  precision: number;\n  gl: WebGL2RenderingContext | null;\n  ext: any;\n  query: WebGLQuery | null;\n  disjoint: any;\n  ns: any;\n  threeRendererPatched: boolean;\n  gpuQueries: { query: WebGLQuery }[] = [];\n  renderCount: number = 0;\n\n  constructor({ logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {}) {\n\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.dom = document.createElement('div');\n    this.dom.style.cssText = 'position:fixed;top:0;left:0;opacity:0.9;z-index:10000;';\n\n    if (minimal) {\n\n      this.dom.style.cssText += 'cursor:pointer';\n\n    }\n\n    this.gl = null;\n    this.query = null;\n\n    this.isRunningCPUProfiling = false;\n    this.minimal = minimal;\n    \n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.renderCount = 0;\n    this.threeRendererPatched = false;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n\n    this.queryCreated = false;\n\n    this.fpsPanel = this.addPanel(new Stats.Panel('FPS', '#0ff', '#002'), 0);\n    this.msPanel = this.addPanel(new Stats.Panel('CPU', '#0f0', '#020'), 1);\n    this.gpuPanel = null;\n\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n\n    if (this.minimal) {\n\n      this.dom.addEventListener('click', (event) => {\n\n        event.preventDefault();\n        this.showPanel(++this.mode % this.dom.children.length);\n\n      }, false);\n\n      this.mode = mode;\n      this.showPanel(this.mode);\n\n    } else {\n\n      window.addEventListener('resize', () => {\n\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      })\n    }\n\n\n  }\n\n  patchThreeRenderer(renderer: THREE.WebGLRenderer) {\n\n    // Store the original render method\n    const originalRenderMethod = renderer.render;\n\n    // Reference to the stats instance\n    const statsInstance = this;\n\n    // Override the render method on the prototype\n    renderer.render = function(scene, camera) {\n      statsInstance.begin(); // Start tracking for this render call\n\n      // Call the original render method\n      originalRenderMethod.call(this, scene, camera);\n\n      statsInstance.end(); // End tracking for this render call\n    };\n\n    this.threeRendererPatched = true;\n\n  }\n\n  resizePanel(panel: Panel, offset: number) {\n\n    panel.canvas.style.position = 'absolute';\n\n    if (this.minimal) {\n\n      panel.canvas.style.display = 'none';\n\n    } else {\n\n      panel.canvas.style.display = 'block';\n      if (this.horizontal) {\n        panel.canvas.style.top = '0px';\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + 'px';\n      } else {\n        panel.canvas.style.left = '0px';\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + 'px';\n\n      }\n    }\n  }\n\n  addPanel(panel: Panel, offset: number) {\n\n    if (panel.canvas) {\n\n      this.dom.appendChild(panel.canvas);\n\n      this.resizePanel(panel, offset);\n\n    }\n\n    return panel;\n\n  }\n\n  showPanel(id: number) {\n\n    for (let i = 0; i < this.dom.children.length; i++) {\n      const child = this.dom.children[i] as HTMLElement;\n\n      child.style.display = i === id ? 'block' : 'none';\n\n    }\n\n    this.mode = id;\n\n  }\n\n  init(canvasOrGL: HTMLCanvasElement | OffscreenCanvas | THREE.WebGLRenderer | WebGL2RenderingContext) {\n    if (!canvasOrGL) {\n      console.error('Stats: The \"canvas\" parameter is undefined.');\n      return;\n    }\n\n\n    // if ((canvasOrGL as any).isWebGPURenderer && !this.threeRendererPatched) {\n    // TODO Color GPU Analytic in another color than yellow to know webgpu or webgl context (blue)\n    //   const canvas: any = canvasOrGL\n    //   this.patchThreeRenderer(canvas as any);\n    //   this.gl = canvas.getContext();\n    // } else \n    if ((canvasOrGL as any).isWebGLRenderer && !this.threeRendererPatched) {\n      const canvas: any = canvasOrGL\n      this.patchThreeRenderer(canvas as any);\n      this.gl = canvas.getContext();\n    }\n\n    // Check if canvasOrGL is already a WebGL2RenderingContext\n    if (!this.gl && canvasOrGL instanceof WebGL2RenderingContext) {\n      this.gl = canvasOrGL;\n    }\n\n    // Handle HTMLCanvasElement and OffscreenCanvas\n    else if (!this.gl && canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\n      this.gl = canvasOrGL.getContext('webgl2') as WebGL2RenderingContext;\n      if (!this.gl) {\n        console.error('Stats: Unable to obtain WebGL2 context.');\n        return;\n      }\n    } else if (!this.gl) {\n      console.error('Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.');\n      return;\n    }\n\n    // Get the extension\n    this.ext = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new Stats.Panel('GPU', '#ff0', '#220'), 2);\n    }\n  }\n\n\n  begin() {\n\n    if (!this.isRunningCPUProfiling) {\n      this.beginProfiling('cpu-started');\n    }\n\n    if (!this.gl || !this.ext) return;\n  \n    if (this.gl && this.ext) {\n      if (this.activeQuery) {\n        // End the previous query if it's still active\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      }\n\n      this.activeQuery = this.gl.createQuery();\n      if (this.activeQuery !== null) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.activeQuery);\n      }\n    }\n  }\n\n\n\n  end() {\n\n    // Increase render count\n    this.renderCount++;\n\n    if (this.gl && this.ext && this.activeQuery) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      // Add the active query to the gpuQueries array and reset it\n      this.gpuQueries.push({ query: this.activeQuery });\n      this.activeQuery = null;\n    }\n\n  }\n\n  processGpuQueries() {\n    if (!this.gl || !this.ext) return;\n  \n    this.totalGpuDuration = 0;\n\n    this.gpuQueries.forEach((queryInfo, index) => {\n      if (this.gl) {\n        const available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);\n        const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n\n        if (available && !disjoint) {\n          const elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);\n          const duration = elapsed * 1e-6;  // Convert nanoseconds to milliseconds\n          this.totalGpuDuration += duration;\n          this.gl.deleteQuery(queryInfo.query);\n          this.gpuQueries.splice(index, 1);  // Remove the processed query\n        }\n      }\n    });\n\n  }\n\n  update() {\n  \n    this.processGpuQueries();\n    this.endProfiling('cpu-started', 'cpu-finished', 'cpu-duration');\n\n    // Calculate the total duration of CPU and GPU work for this frame\n    this.addToAverage(this.totalCpuDuration , this.averageCpu);\n    this.addToAverage(this.totalGpuDuration, this.averageGpu);\n\n    this.renderCount = 0;\n    this.totalCpuDuration = 0;\n    this.totalGpuDuration = 0;\n    this.totalFps = 0;\n\n    this.beginTime = this.endInternal()\n\n\n\n  }\n\n  endInternal() {\n\n    this.frames++;\n    const time = (performance || Date).now();\n\n    if (time >= this.prevCpuTime + 1000 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n\n      this.prevCpuTime = time;\n    }\n\n    if (time >= this.prevTime + 1000) {\n\n      const fps = (this.frames * 1000) / (time - this.prevTime);\n\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n\n      this.prevTime = time;\n      this.frames = 0;\n\n    }\n\n    return time;\n\n  }\n\n  addToAverage(value: number, averageArray: { logs: any; graph: any; }) {\n\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n\n      averageArray.logs.shift();\n\n    }\n\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n\n      averageArray.graph.shift();\n\n    }\n\n  }\n\n  beginProfiling(marker: string) {\n\n    if (window.performance) {\n\n      window.performance.mark(marker);\n      this.isRunningCPUProfiling = true\n\n    }\n\n  }\n\n  endProfiling(startMarker: string | PerformanceMeasureOptions | undefined, endMarker: string | undefined, measureName: string) {\n\n    if (window.performance && endMarker && this.isRunningCPUProfiling) {\n\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.totalCpuDuration += cpuMeasure.duration;\n      this.isRunningCPUProfiling = false\n\n    }\n\n  }\n\n  updatePanel(panel: { update: any; } | null, averageArray: { logs: number[], graph: number[] }) {\n\n    if (averageArray.logs.length > 0) {\n\n      let sumLog = 0;\n      let max = 0.01;\n\n      for (let i = 0; i < averageArray.logs.length; i++) {\n\n        sumLog += averageArray.logs[i];\n\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n\n      }\n\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n\n        sumGraph += averageArray.graph[i];\n\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n\n      }\n\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n\n    }\n  }\n\n  get domElement() {\n    // patch for some use case in threejs\n\t\treturn this.dom;\n\n\t}\n\n  get container() { // @deprecated\n\n\t\tconsole.warn('Stats: Deprecated! this.container as been replaced to this.dom ')\n\t\treturn this.dom;\n\n\t}\n\n}\n\n\nexport default Stats;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}