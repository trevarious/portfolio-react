{"ast":null,"code":"var _jsxFileName = \"/Users/trevorsykes/Desktop/react-portfolio/src/BlackJackCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport cardTexture from '../src/pokerCard-Texture.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BlackjackCard({\n  width,\n  height\n}) {\n  _s();\n  const cardContainer = useRef(null);\n  useEffect(() => {\n    let scene, camera, renderer, card;\n\n    // Create a new scene\n    scene = new THREE.Scene();\n\n    // Create a camera\n    camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Create a renderer\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0xababab, 1);\n\n    // Append renderer to the container\n    cardContainer.current.appendChild(renderer.domElement);\n\n    // Create a card geometry (plane)\n    const geometry = new THREE.PlaneGeometry(3, 4);\n    const texture = new THREE.TextureLoader().load(cardTexture // Replace with the path to your card texture\n    );\n\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      side: THREE.DoubleSide\n    });\n\n    // Create the card mesh\n    card = new THREE.Mesh(geometry, material);\n    scene.add(card);\n\n    // Animation function (if needed)\n\n    // Render function\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Any animation logic if required\n\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Clean up on unmount\n    return () => {\n      renderer.domElement.remove();\n      renderer.dispose();\n    };\n  }, [width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardContainer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n}\n_s(BlackjackCard, \"xYUT47lSlSz0zk1Nui74sWGWynE=\");\n_c = BlackjackCard;\nvar _c;\n$RefreshReg$(_c, \"BlackjackCard\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","cardTexture","jsxDEV","_jsxDEV","BlackjackCard","width","height","_s","cardContainer","scene","camera","renderer","card","Scene","PerspectiveCamera","position","z","WebGLRenderer","antialias","setSize","setClearColor","current","appendChild","domElement","geometry","PlaneGeometry","texture","TextureLoader","load","material","MeshBasicMaterial","map","side","DoubleSide","Mesh","add","animate","requestAnimationFrame","render","remove","dispose","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/trevorsykes/Desktop/react-portfolio/src/BlackJackCard.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport cardTexture from '../src/pokerCard-Texture.webp'\n\nexport default function BlackjackCard({ width, height }) {\n    const cardContainer = useRef(null);\n\n    useEffect(() => {\n        let scene, camera, renderer, card;\n\n        // Create a new scene\n        scene = new THREE.Scene();\n\n        // Create a camera\n        camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n        camera.position.z = 5;\n\n        // Create a renderer\n        renderer = new THREE.WebGLRenderer({ antialias: true });\n        renderer.setSize(width, height);\n        renderer.setClearColor(0xababab, 1);\n\n        // Append renderer to the container\n        cardContainer.current.appendChild(renderer.domElement);\n\n        // Create a card geometry (plane)\n        const geometry = new THREE.PlaneGeometry(3, 4);\n        const texture = new THREE.TextureLoader().load(\n            cardTexture // Replace with the path to your card texture\n        );\n        const material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n\n        // Create the card mesh\n        card = new THREE.Mesh(geometry, material);\n        scene.add(card);\n\n        // Animation function (if needed)\n\n        // Render function\n        const animate = () => {\n            requestAnimationFrame(animate);\n\n            // Any animation logic if required\n\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        // Clean up on unmount\n        return () => {\n            renderer.domElement.remove();\n            renderer.dispose();\n        };\n    }, [width, height]);\n\n    return <div ref={cardContainer} />;\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,WAAW,MAAM,+BAA+B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,eAAe,SAASC,aAAaA,CAAC;EAAEC,KAAK;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACrD,MAAMC,aAAa,GAAGT,MAAM,CAAC,IAAI,CAAC;EAElCD,SAAS,CAAC,MAAM;IACZ,IAAIW,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,IAAI;;IAEjC;IACAH,KAAK,GAAG,IAAIT,KAAK,CAACa,KAAK,CAAC,CAAC;;IAEzB;IACAH,MAAM,GAAG,IAAIV,KAAK,CAACc,iBAAiB,CAAC,EAAE,EAAET,KAAK,GAAGC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;IACnEI,MAAM,CAACK,QAAQ,CAACC,CAAC,GAAG,CAAC;;IAErB;IACAL,QAAQ,GAAG,IAAIX,KAAK,CAACiB,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IACvDP,QAAQ,CAACQ,OAAO,CAACd,KAAK,EAAEC,MAAM,CAAC;IAC/BK,QAAQ,CAACS,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;;IAEnC;IACAZ,aAAa,CAACa,OAAO,CAACC,WAAW,CAACX,QAAQ,CAACY,UAAU,CAAC;;IAEtD;IACA,MAAMC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9C,MAAMC,OAAO,GAAG,IAAI1B,KAAK,CAAC2B,aAAa,CAAC,CAAC,CAACC,IAAI,CAC1C3B,WAAW,CAAC;IAChB,CAAC;;IACD,MAAM4B,QAAQ,GAAG,IAAI7B,KAAK,CAAC8B,iBAAiB,CAAC;MAAEC,GAAG,EAAEL,OAAO;MAAEM,IAAI,EAAEhC,KAAK,CAACiC;IAAW,CAAC,CAAC;;IAEtF;IACArB,IAAI,GAAG,IAAIZ,KAAK,CAACkC,IAAI,CAACV,QAAQ,EAAEK,QAAQ,CAAC;IACzCpB,KAAK,CAAC0B,GAAG,CAACvB,IAAI,CAAC;;IAEf;;IAEA;IACA,MAAMwB,OAAO,GAAGA,CAAA,KAAM;MAClBC,qBAAqB,CAACD,OAAO,CAAC;;MAE9B;;MAEAzB,QAAQ,CAAC2B,MAAM,CAAC7B,KAAK,EAAEC,MAAM,CAAC;IAClC,CAAC;IAED0B,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACTzB,QAAQ,CAACY,UAAU,CAACgB,MAAM,CAAC,CAAC;MAC5B5B,QAAQ,CAAC6B,OAAO,CAAC,CAAC;IACtB,CAAC;EACL,CAAC,EAAE,CAACnC,KAAK,EAAEC,MAAM,CAAC,CAAC;EAEnB,oBAAOH,OAAA;IAAKsC,GAAG,EAAEjC;EAAc;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtC;AAACtC,EAAA,CArDuBH,aAAa;AAAA0C,EAAA,GAAb1C,aAAa;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}